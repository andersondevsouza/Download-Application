unit untMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.ExtCtrls, Vcl.Imaging.pngimage, untInterfaces,
  untRequestHttp, untResponseHttp, Data.DB, Vcl.Grids, Vcl.DBGrids, untDataModule;

type
  TfrmMain = class(TForm, IObserverDownload)
    ImgDownload: TImage;
    pnTop: TPanel;
    Label1: TLabel;
    btnClose: TImage;
    PageControl1: TPageControl;
    tsDownload: TTabSheet;
    tsHistorico: TTabSheet;
    pnButtons: TPanel;
    btnAllDownloads: TButton;
    btnDownload: TButton;
    btnStopDownload: TButton;
    pnMain: TPanel;
    Label3: TLabel;
    edtURL: TEdit;
    pnProgress: TPanel;
    lbPerc: TLabel;
    lbKb: TLabel;
    pbDownload: TProgressBar;
    DBGrid1: TDBGrid;
    Panel1: TPanel;
    Button1: TButton;
    Ds: TDataSource;
    procedure btnCloseClick(Sender: TObject);
    procedure btnDownloadClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnStopDownloadClick(Sender: TObject);
    procedure btnAllDownloadsClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    RequestHTTP: IRequestHTTP;

    function GetSavePathDownload: String;
    procedure DownloadOnOff(inDownload: Boolean);
    procedure ShowProgress(DownloadResponse: TDownloadResponse);
    procedure GetLogDownloads;
    procedure ShowPageHistorico;
    procedure ShowPageDownload;
  public
    { Public declarations }
    procedure RefreshProgress(DownloadResponse:
     TDownloadResponse);
  end;

var
  frmMain: TfrmMain;

implementation

{$R *.dfm}

procedure TfrmMain.btnAllDownloadsClick(Sender: TObject);
begin
  ShowPageHistorico;
end;

procedure TfrmMain.btnCloseClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TfrmMain.btnDownloadClick(Sender: TObject);
var
  SavePath: String;
begin
  if edtURL.Text = '' then begin
    ShowMessage('Informe a URL para download!');
    Exit;
  end;

  SavePath := GetSavePathDownload;
  if SavePath.IsEmpty then
    Exit;
  SavePath := ChangeFileExt(SavePath, ExtractFileExt(edtURL.Text));

  RequestHTTP.Download(edtURL.Text, SavePath);
end;

procedure TfrmMain.btnStopDownloadClick(Sender: TObject);
begin
  RequestHTTP.StopDownload;
end;

procedure TfrmMain.Button1Click(Sender: TObject);
begin
  ShowPageDownload;
end;

procedure TfrmMain.DownloadOnOff(inDownload: Boolean);
begin
  Self.Height := 435;
  btnDownload.Enabled := False;
  btnStopDownload.Enabled := True;
  btnAllDownloads.Enabled := False;
  pnProgress.Visible := True;

  if not inDownload then begin
    Self.Height := 355;
    btnDownload.Enabled := True;
    btnStopDownload.Enabled := False;
    btnAllDownloads.Enabled := True;
    pnProgress.Visible := False;
  end;
end;

procedure TfrmMain.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if RequestHTTP.DownloadIsRunning then
  begin
    if Application.MessageBox('Existe um download em andamento, ',
      'deseja interrompe-lo?', MB_YESNO + MB_ICONQUESTION) = mrYes then begin
      btnStopDownload.Click;
    end
    else
      Abort;
  end;
end;

procedure TfrmMain.FormCreate(Sender: TObject);
begin
  RequestHTTP := TRequestHTTP.New;
  RequestHTTP.AddObserver(Self);

  Self.Height := 355;
  tsHistorico.TabVisible := False;
  tsDownload.TabVisible := True;
end;

procedure TfrmMain.GetLogDownloads;
begin
  Ds.DataSet := DataM.GetLogDownloads;
end;

function TfrmMain.GetSavePathDownload: String;
var
  dlgGetPath: TSaveDialog;
begin
  dlgGetPath := TSaveDialog.Create(nil);
  try
    dlgGetPath.Filter := 'Arquivos' + ExtractFileExt(edtURL.Text) + '|*' + ExtractFileExt(edtURL.Text);
    dlgGetPath.FileName := 'Arquivo';
    if dlgGetPath.Execute then
      Result := dlgGetPath.FileName
    else
      Result := '';
  finally
    FreeAndNil(dlgGetPath);
  end;
end;

procedure TfrmMain.RefreshProgress(
  DownloadResponse: TDownloadResponse);
begin
  case DownloadResponse.Status of
    stDownloadRunning:
    begin
      ShowProgress(DownloadResponse); 
      DownloadOnOff(True);
    end;
    stDownloadFinalize:
    begin
      ShowMessage('Download não terminou!');
      DownloadOnOff(False);
    end;
    stDownloadSuccess:
    begin
      ShowMessage('Download finalizado com sucesso!');
      DownloadOnOff(False);
    end;
  end;
end;


procedure TfrmMain.ShowPageDownload;
begin
  Self.Height := 355;
  tsHistorico.TabVisible := False;
  tsDownload.TabVisible := True;
end;

procedure TfrmMain.ShowPageHistorico;
begin
  Self.Height := 435;
  tsHistorico.TabVisible := True;
  tsDownload.TabVisible := False;

  GetLogDownloads;
end;

procedure TfrmMain.ShowProgress(DownloadResponse: TDownloadResponse);
begin
  pbDownload.Max := DownloadResponse.MaxProgress;
  pbDownload.Position := DownloadResponse.CountProgress - 20;
  lbPerc.Caption := FormatFloat('0 %', DownloadResponse.PercProgress);
  lbKb.Caption := FormatFloat('0.000 KBs %', DownloadResponse.KbProgress);
end;

end.
